name: Semantic Release on Merge

# This workflow is triggered when a PR is merged to main
# or can be manually triggered with custom version information
on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "mainnet"
        type: choice
        options:
          - testnet
          - mainnet
      version:
        description: "Custom semantic version (optional)"
        required: false
        type: string

jobs:
  # Only run this job if the PR was merged to the default branch (not just closed)
  # or if manually triggered via workflow_dispatch
  check-trigger:
    name: Check Trigger Conditions
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == github.event.repository.default_branch) || github.event_name == 'workflow_dispatch'
    outputs:
      should-continue: ${{ steps.check.outputs.should-continue }}
      environment: ${{ steps.get-labels.outputs.environment }}
    steps:
      - name: Determine if we should proceed
        id: check
        run: |
          echo "should-continue=true" >> $GITHUB_OUTPUT
      
      - name: Get PR labels for environment
        id: get-labels
        if: github.event_name == 'pull_request'
        run: |
          # Default to testnet if no environment label is found
          ENVIRONMENT="testnet"
          
          # Check PR labels for environment
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'environment:mainnet') }}" == "true" ]]; then
            ENVIRONMENT="mainnet"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  # Fetch secrets from AWS Secrets Manager
  fetch-aws-secrets:
    name: Fetch AWS Secrets
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-continue == 'true'
    # Use environment from manual trigger, PR labels, or default to 'testnet'
    environment: ${{ github.event.inputs.environment || needs.check-trigger.outputs.environment || 'testnet' }}
    outputs:
      secrets-ready: ${{ steps.fetch-secrets.outputs.success }}
    permissions:
      id-token: write # Needed for AWS OIDC authentication
      contents: read

    steps:
      # Set up AWS credentials using OIDC for secure authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Fetch secrets from AWS Secrets Manager as a JSON string
      # The secret will be available as an environment variable: VERIFICATION_KEYS
      - name: Get secrets from AWS Secrets Manager
        id: fetch-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            VERIFICATION_KEYS, ${{ secrets.AWS_SECRET_NAME }}
          parse-json-secrets: false # Keep as raw JSON string

      # Verify that secrets were loaded successfully
      - name: Verify secrets were loaded
        id: check-secrets
        run: |
          # Check if the secret was loaded properly
          if [ -z "$VERIFICATION_KEYS" ]; then
            echo "Error: VERIFICATION_KEYS environment variable is empty"
            exit 1
          fi
          echo "AWS Secrets loaded successfully"
          echo "success=true" >> $GITHUB_OUTPUT

  # Run semantic-release to publish new version
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [check-trigger, fetch-aws-secrets]
    if: needs.check-trigger.outputs.should-continue == 'true' && needs.fetch-aws-secrets.outputs.secrets-ready == 'true'
    permissions:
      contents: write # Needed for github release
      issues: write # Needed for issue comments
      pull-requests: write # Needed for PR comments
      id-token: write # Needed for npm publishing with provenance

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Needed for semantic-release to generate changelogs

      - name: Get default branch
        id: get-default-branch
        run: |
          # Get the default branch of the repository
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          
      - name: Checkout default branch
        run: |
          # Checkout the default branch for releases
          git checkout ${{ steps.get-default-branch.outputs.default_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"

      - name: Install dependencies
        uses: borales/actions-yarn@v5
        with:
          cmd: install

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build Project
        uses: borales/actions-yarn@v5
        with:
          cmd: build
          
      - name: Setup npm token
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      # Run semantic-release for version determination and publishing
      - name: Run Semantic Release
        uses: borales/actions-yarn@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          CUSTOM_VERSION: ${{ github.event.inputs.version }}
          RELEASE_VERSION: ${{ github.event.inputs.version }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          CHAIN_DATA_URL: ${{ secrets.CHAIN_DATA_URL }}
          BYTECODE_PATH: ${{ secrets.BYTECODE_PATH }}
          RESULTS_FILE: ${{ secrets.RESULTS_FILE }}
          # VERIFICATION_KEYS is already set by aws-secretsmanager-get-secrets
        with: 
          cmd: npx semantic-release