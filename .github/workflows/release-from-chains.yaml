name: Trigger Release from eco-chains

# This workflow is triggered in three ways:
# 1. Automatically when a tag is pushed to eco-chains repository
# 2. Manually via the GitHub UI with environment selection
# 3. Manually via the GitHub UI with a custom version string
on:
  repository_dispatch:
    types: [eco-chains-tag-pushed]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "mainnet"
        type: choice
        options:
          - testnet
          - mainnet
      version:
        description: "Custom semantic version (optional)"
        required: false
        type: string

jobs:
  # First job: Fetch secrets from AWS Secrets Manager
  fetch-aws-secrets:
    name: Fetch AWS Secrets
    runs-on: ubuntu-latest
    # Use environment from manual trigger or default to 'testnet'
    environment: ${{ github.event.inputs.environment || github.event.client_payload.environment || 'testnet' }}
    outputs:
      secrets-ready: ${{ steps.fetch-secrets.outputs.success }}
    permissions:
      id-token: write # Needed for AWS OIDC authentication
      contents: read

    steps:
      # Set up AWS credentials using OIDC for secure authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Fetch secrets from AWS Secrets Manager as a JSON string
      # The secret will be available as an environment variable: VERIFICATION_KEYS
      - name: Get secrets from AWS Secrets Manager
        id: fetch-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            VERIFICATION_KEYS, ${{ secrets.AWS_SECRET_NAME }}
          parse-json-secrets: false # Keep as raw JSON string

      # Verify that secrets were loaded successfully
      - name: Verify secrets were loaded
        id: check-secrets
        run: |
          # Check if the secret was loaded properly
          if [ -z "$VERIFICATION_KEYS" ]; then
            echo "Error: VERIFICATION_KEYS environment variable is empty"
            exit 1
          fi
          echo "AWS Secrets loaded successfully"
          echo "success=true" >> $GITHUB_OUTPUT

  # Second job: Run semantic-release to publish new version
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    # This job depends on successful completion of fetch-aws-secrets
    needs: fetch-aws-secrets
    permissions:
      contents: write # Needed for github release
      issues: write # Needed for issue comments
      pull-requests: write # Needed for PR comments
      id-token: write # Needed for npm publishing with provenance

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Needed for semantic-release to generate changelogs
          token: ${{ secrets.GITHUB_TOKEN }} # Use token with push permissions

      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"

      - name: Install dependencies
        uses: borales/actions-yarn@v5
        with:
          cmd: install

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build Project
        uses: borales/actions-yarn@v5
        with:
          cmd: build
          
      - name: Setup npm token
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # Run semantic-release with access to the AWS secrets
      - name: Run Semantic Release
        id: semantic-release
        uses: borales/actions-yarn@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          ECO_CHAINS_TAG: ${{ github.event.client_payload.tag }}
          CUSTOM_VERSION: ${{ github.event.inputs.version }}
          RELEASE_VERSION: ${{ github.event.inputs.version || github.event.client_payload.tag }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          CHAIN_DATA_URL: ${{ secrets.CHAIN_DATA_URL }}
          BYTECODE_PATH: ${{ secrets.BYTECODE_PATH }}
          RESULTS_FILE: ${{ secrets.RESULTS_FILE }}
          # VERIFICATION_KEYS is already set by aws-secretsmanager-get-secrets
        with: 
          cmd: semantic:pub
          # echo "Printing contract verification keys"
          # echo "$VERIFICATION_KEYS"
          # echo "Processing tag from eco-chains: $ECO_CHAINS_TAG or custom version: $CUSTOM_VERSION"
          # Run semantic-release to create a new release based on commits
          # npx semantic-release
          
      # Create a git tag if semantic release step succeeded and tag was provided
      - name: Create Git Tag
        if: ${{ success() && github.event.client_payload.tag != '' }}
        run: |
          # Configure git with GitHub Actions bot identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get the current branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          
          # Create the tag using the passed tag value from eco-chains
          git tag "v${{ github.event.client_payload.tag }}" -m "Release v${{ github.event.client_payload.tag }} triggered from eco-chains"
          
          # Push the tag to the remote repository using the provided token
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "v${{ github.event.client_payload.tag }}"
          
          echo "Successfully created and pushed tag v${{ github.event.client_payload.tag }} on branch $BRANCH_NAME"
