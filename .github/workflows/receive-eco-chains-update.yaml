name: Process eco-chains Update

# This workflow is triggered when eco-chains repository dispatches an event
on:
  repository_dispatch:
    types: [eco-chains-tag-pushed]
  # Optional manual trigger for testing
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag/version from eco-chains"
        required: true
        type: string
      version_type:
        description: "Version type for the update"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      environment:
        description: "Environment to deploy to"
        required: true
        default: "testnet"
        type: choice
        options:
          - testnet
          - mainnet

jobs:
  create-update-pr:
    name: Create Update PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Get default branch
        id: get-default-branch
        run: |
          # Get the default branch of the repository
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: Set variables
        id: set-vars
        run: |
          # Use inputs for workflow_dispatch or client_payload for repository_dispatch
          TAG="${{ github.event.inputs.tag || github.event.client_payload.tag }}"
          VERSION_TYPE="${{ github.event.inputs.version_type || github.event.client_payload.version_type || 'patch' }}"
          ENVIRONMENT="${{ github.event.inputs.environment || github.event.client_payload.environment || 'testnet' }}"
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          # Create a unique branch name
          BRANCH_NAME="eco-chains-update-$TAG-$(date +%s)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate semantic commit message
        id: create-commit
        run: |
          # Determine appropriate semantic prefix based on version type
          VERSION_TYPE="${{ steps.set-vars.outputs.version_type }}"
          TAG="${{ steps.set-vars.outputs.tag }}"
          
          if [ "$VERSION_TYPE" == "patch" ]; then
            PREFIX="fix"
          elif [ "$VERSION_TYPE" == "minor" ]; then
            PREFIX="feat"
          elif [ "$VERSION_TYPE" == "major" ]; then
            PREFIX="break"
          else
            PREFIX="fix"
          fi
          
          # Create commit message with appropriate semantic prefix
          COMMIT_MESSAGE="$PREFIX: update chain data from eco-chains $TAG"
          if [ "$VERSION_TYPE" == "major" ]; then
            # For major versions, add the BREAKING CHANGE footer
            COMMIT_MESSAGE="$COMMIT_MESSAGE
            
            BREAKING CHANGE: Updated chain data from eco-chains that requires major version bump"
          fi
          
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.create-commit.outputs.commit_message }}
          title: "Chain update from eco-chains ${{ steps.set-vars.outputs.tag }}"
          body: |
            This PR was automatically created by the eco-chains update workflow.
            
            - Updates chain data from eco-chains version: ${{ steps.set-vars.outputs.tag }}
            - Target environment: ${{ steps.set-vars.outputs.environment }}
            - Version type: ${{ steps.set-vars.outputs.version_type }}
            
            Once merged, this will trigger the semantic release process to publish a new version.
          branch: ${{ steps.set-vars.outputs.branch_name }}
          base: ${{ steps.get-default-branch.outputs.default_branch }}
          labels: |
            automated-pr
            eco-chains-update
            ${{ steps.set-vars.outputs.version_type }}
          draft: false
      
      - name: Check outputs
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "Pull Request Number - ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.create-pr.outputs.pull-request-url }}"